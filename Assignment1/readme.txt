To run my specific programs, I go into my directory that has the python files, so i do $ cd/Desktop/CAAP/Github/CAAP-CS/Assignment1. I then input  filename.py to run the program. I am using Python version 2.7.
My hello.py simply prints Hello!
My converter.py converts an input amount of degrees Celsius to degrees Fahrenheit. I put a small introduction in the beginning. Then, I made the variable F equal whatever the user inputs. After that, create a variable C that makes the conversion. Then, make a for loop that prints A (the answer plus “degrees Celsius”) 5 times.
My unit_conversion.py converts an input amount of gallons to pints. It was very similar to converter.py, but made it with gallons and pints, with a different equation.
My slope.py asks the user for an amount of numbers to be added up, then asks them to insert each number, and then adds them up. I had to first ask the user to input the number of numbers we will be adding, then create a blank list to keep appending. Create a for loop that asks the user to input a number as many times that they asked for. Append this number into the blank list, then print the sum of that list.
My fibo.py gives me the nth term in the Fibonacci sequence {1,1,2,3,5,8,13,...}. We had to establish that the first number is 0 and the next number is 1. We set up a for loop that adds these two numbers, then (like we did for the (x,y) example in lecture) we switch the values so that each variable is now moved up one in the ladder.
My change_1.py gives the least amount of coins needed for an input amount of change. Sorry, I know that this uses a lot of memory, but it was how I mapped it out in my head. So, I first ask how much money needs to be made into change. Then, I created an empty list. I then said “hey if the change amount is greater than or equal to 0.25, then let’s subtract that amount.” Then, it would append a 1 into the list. Then I would sum the list to figure out how many quarters I needed to use. After that, it would run the loop again. I then did the same thing for dimes, nickels, and pennies. I was having trouble with pennies for some reason. When I applied the same logic, it didn’t work for 0.03 and 0.04, as it would leave a penny without having been counted for. So, I then created a final loop that said “if it’s greater than 0.00, then subtract by 0.01” and it seemed to do the trick. Then add up the amount in each list, and I would find out the least amount of coins for a particular change amount.
My change_2.py gives the amount of change made with an inputted amount of each coin. For the challenge, it was easy, just ask for the amount of each coin, then multiply by its value.
